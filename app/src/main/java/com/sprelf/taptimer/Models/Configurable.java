/*
 *     TapTimer - A Timer Widget App
 *     Copyright (C) 2016 Dilley, Christopher
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.sprelf.taptimer.Models;

import android.content.Context;
import android.view.View;

import com.sprelf.taptimer.Views.EmojiPickerView;

/**
 * Created by Chris on 20.11.2016.
 * Interface for housing methods shared by ActiveItems and Prefabs
 */
public interface Configurable
{

    /** Constructs a View for this active item to display in a PropertyConfigActivity, inflates it,
     * applies this Configurable's data to it, and returns it.
     *
     * @param c Context within which to perform the operation.
     * @return The constructed configuration view
     */
    View getConfigView(Context c);

    /** Returns a reference the EmojiPickerView inside the given View created by getConfigView().
     * If no such view exists, returns null.
     *
     * @param view View to identify the EmojiPickerView within.
     * @return The EmojiPickerView in the given view, or null if none exists.
     */
    EmojiPickerView identifyEmojiPickerView(View view);

    /** Extracts all values from the given View generated by getConfigView(), and applies those
     * values to this Configurable.  If the values are not found in the given view, no change
     * takes place.
     *
     * @param view View to extract values from.
     */
    void absorbConfigViewValues(View view);


    /** Gets the resource identifier of the layout for rendering a preview of this Configurable
     *  object in the configuration screen.
     *
     * @return Resource identifier for the rendering layout.
     */
    int getConfigPreviewResource();

    /**
     * Performs the work of manipulating the configuration preview based on the contents
     * of this Configurable.
     *
     * @param view View to manipulate.
     */
    void attachDataToConfigPreview(View view);
}
